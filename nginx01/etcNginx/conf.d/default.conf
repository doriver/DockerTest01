upstream backend {
    #least_conn;   #각 요청을 서버에 할당된 가중치를 고려해 연결 수가 가장 적은 서버로 전송 (기본: 요청을 순서대로 처리)
    server serv01:8080;
    server serv02:8080;
}

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;

server {
    listen       80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

  # 공통 헤더 설정
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;   # 클라이언트 실제IP
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   # 필수, 클라이언트IP + 요청이 지나온 프록시 서버의 IP
    proxy_set_header X-Forwarded-Proto $scheme;

    location ~* \.(css|js)$ {
        proxy_pass http://backend;

        # 캐싱 설정
        proxy_cache my_cache;
        proxy_cache_valid 200 302 10m; # 200과 302 응답 코드에 대해 10분 동안 캐시를 유지
        proxy_cache_valid 404 1m; # 404 응답 코드에 대해 1분 동안 유지

        add_header X-Cache-Status $upstream_cache_status;  # 응답 헤더에 캐시 상태를 추가
    }

    location / {
        proxy_pass http://backend;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}